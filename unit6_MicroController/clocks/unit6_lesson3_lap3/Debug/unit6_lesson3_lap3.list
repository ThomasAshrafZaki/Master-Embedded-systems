
unit6_lesson3_lap3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000350  08000350  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000350  08000350  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000350  08000350  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000350  08000350  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000364  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000364  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b56  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001d8  00000000  00000000  00020b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00020d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00020db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c8c  00000000  00000000  00020de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000062b  00000000  00000000  00022a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008041  00000000  00000000  00023097  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002b0d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0002b154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000338 	.word	0x08000338

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000338 	.word	0x08000338

08000170 <main>:
}register_accses;
volatile accses_pins * CFGR =(volatile accses_pins *)(0x40021000+0x04);
volatile accses_pins * ODR=(volatile accses_pins *)(0x40010800+0x0C);
volatile accses_pins * CR=(volatile accses_pins *)(0x40021000+0x0);
int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: Not allowed*/

	//10: PLL selected as system clock
	CFGR->Spin.pin0=0;
 8000176:	4b43      	ldr	r3, [pc, #268]	; (8000284 <main+0x114>)
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	6813      	ldr	r3, [r2, #0]
 800017c:	f36f 0300 	bfc	r3, #0, #1
 8000180:	6013      	str	r3, [r2, #0]
	CFGR->Spin.pin1=1;
 8000182:	4b40      	ldr	r3, [pc, #256]	; (8000284 <main+0x114>)
 8000184:	681a      	ldr	r2, [r3, #0]
 8000186:	6813      	ldr	r3, [r2, #0]
 8000188:	f043 0302 	orr.w	r3, r3, #2
 800018c:	6013      	str	r3, [r2, #0]
	0: HSI oscillator clock / 2 selected as PLL input clock
	1: Clock from PREDIV1 selected as PLL input clock
	Note: When changing the main PLLâ€™s entry clock source, the original clock source must be switched
	off only after the selection of the new clock source.*/

	CFGR->Spin.pin16=0;//0: HSI oscillator clock / 2 selected as PLL input clock
 800018e:	4b3d      	ldr	r3, [pc, #244]	; (8000284 <main+0x114>)
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	6813      	ldr	r3, [r2, #0]
 8000194:	f36f 4310 	bfc	r3, #16, #1
 8000198:	6013      	str	r3, [r2, #0]
	1101: PLL input clock x 6.5
	111x: Reserved*/

	//i want 8/2=4 from hsi *8=32 sysclk
	//0110: PLL input clock x 8
	CFGR->Spin.pin18=0;
 800019a:	4b3a      	ldr	r3, [pc, #232]	; (8000284 <main+0x114>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	6813      	ldr	r3, [r2, #0]
 80001a0:	f36f 4392 	bfc	r3, #18, #1
 80001a4:	6013      	str	r3, [r2, #0]
	CFGR->Spin.pin19=1;
 80001a6:	4b37      	ldr	r3, [pc, #220]	; (8000284 <main+0x114>)
 80001a8:	681a      	ldr	r2, [r3, #0]
 80001aa:	6813      	ldr	r3, [r2, #0]
 80001ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001b0:	6013      	str	r3, [r2, #0]
	CFGR->Spin.pin20=1;
 80001b2:	4b34      	ldr	r3, [pc, #208]	; (8000284 <main+0x114>)
 80001b4:	681a      	ldr	r2, [r3, #0]
 80001b6:	6813      	ldr	r3, [r2, #0]
 80001b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001bc:	6013      	str	r3, [r2, #0]
	CFGR->Spin.pin21=0;
 80001be:	4b31      	ldr	r3, [pc, #196]	; (8000284 <main+0x114>)
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	6813      	ldr	r3, [r2, #0]
 80001c4:	f36f 5355 	bfc	r3, #21, #1
 80001c8:	6013      	str	r3, [r2, #0]
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	//101: HCLK divided by 4
	// apb2--->8 Mhz
	CFGR->Spin.pin11=1;
 80001ca:	4b2e      	ldr	r3, [pc, #184]	; (8000284 <main+0x114>)
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	6813      	ldr	r3, [r2, #0]
 80001d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001d4:	6013      	str	r3, [r2, #0]
	CFGR->Spin.pin12=0;
 80001d6:	4b2b      	ldr	r3, [pc, #172]	; (8000284 <main+0x114>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	6813      	ldr	r3, [r2, #0]
 80001dc:	f36f 330c 	bfc	r3, #12, #1
 80001e0:	6013      	str	r3, [r2, #0]
	CFGR->Spin.pin13=1;
 80001e2:	4b28      	ldr	r3, [pc, #160]	; (8000284 <main+0x114>)
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	6813      	ldr	r3, [r2, #0]
 80001e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001ec:	6013      	str	r3, [r2, #0]
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	//100: HCLK divided by 2
	//apb1--->16 Mhz
	CFGR->Spin.pin8=0;
 80001ee:	4b25      	ldr	r3, [pc, #148]	; (8000284 <main+0x114>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	6813      	ldr	r3, [r2, #0]
 80001f4:	f36f 2308 	bfc	r3, #8, #1
 80001f8:	6013      	str	r3, [r2, #0]
	CFGR->Spin.pin9=0;
 80001fa:	4b22      	ldr	r3, [pc, #136]	; (8000284 <main+0x114>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	6813      	ldr	r3, [r2, #0]
 8000200:	f36f 2349 	bfc	r3, #9, #1
 8000204:	6013      	str	r3, [r2, #0]
	CFGR->Spin.pin10=1;
 8000206:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <main+0x114>)
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	6813      	ldr	r3, [r2, #0]
 800020c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000210:	6013      	str	r3, [r2, #0]
		Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
		PLL clock is used as system clock or is selected to become the system clock. Software
		must disable the USB OTG FS clock before clearing this bit.
		0: PLL OFF
		1: PLL ON*/
		CR->Spin.pin24=1;
 8000212:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <main+0x118>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800021c:	6013      	str	r3, [r2, #0]
		//-----------------------

	//enable clock on porta
	RCC_APB2ENR |=1<<2;
 800021e:	4b1b      	ldr	r3, [pc, #108]	; (800028c <main+0x11c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a1a      	ldr	r2, [pc, #104]	; (800028c <main+0x11c>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6013      	str	r3, [r2, #0]
	CRH_R &=0xff0fffff;
 800022a:	4b19      	ldr	r3, [pc, #100]	; (8000290 <main+0x120>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a18      	ldr	r2, [pc, #96]	; (8000290 <main+0x120>)
 8000230:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000234:	6013      	str	r3, [r2, #0]
	CRH_R |=0x00200000;
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <main+0x120>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a15      	ldr	r2, [pc, #84]	; (8000290 <main+0x120>)
 800023c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000240:	6013      	str	r3, [r2, #0]
	while(1)
	{
		//ODR_R |=1<<13;
		ODR->Spin.pin13=1;
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <main+0x124>)
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	6813      	ldr	r3, [r2, #0]
 8000248:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024c:	6013      	str	r3, [r2, #0]
		for(int x=0;x<=100000;x++);
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	e002      	b.n	800025a <main+0xea>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <main+0x128>)
 800025e:	4293      	cmp	r3, r2
 8000260:	ddf8      	ble.n	8000254 <main+0xe4>
		//ODR_R &=~(1<<13);s
		ODR->Spin.pin13=0;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <main+0x124>)
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	f36f 334d 	bfc	r3, #13, #1
 800026c:	6013      	str	r3, [r2, #0]
		for(int x=0;x<=100000;x++);
 800026e:	2300      	movs	r3, #0
 8000270:	603b      	str	r3, [r7, #0]
 8000272:	e002      	b.n	800027a <main+0x10a>
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	3301      	adds	r3, #1
 8000278:	603b      	str	r3, [r7, #0]
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <main+0x128>)
 800027e:	4293      	cmp	r3, r2
 8000280:	ddf8      	ble.n	8000274 <main+0x104>
		ODR->Spin.pin13=1;
 8000282:	e7de      	b.n	8000242 <main+0xd2>
 8000284:	20000000 	.word	0x20000000
 8000288:	20000008 	.word	0x20000008
 800028c:	40021018 	.word	0x40021018
 8000290:	40010804 	.word	0x40010804
 8000294:	20000004 	.word	0x20000004
 8000298:	000186a0 	.word	0x000186a0

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 f811 	bl	80002f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ff4f 	bl	8000170 <main>

080002d2 <LoopForever>:

LoopForever:
    b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80002e0:	08000358 	.word	0x08000358
  ldr r2, =_sbss
 80002e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80002e8:	20000028 	.word	0x20000028

080002ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC1_2_IRQHandler>
	...

080002f0 <__libc_init_array>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	2500      	movs	r5, #0
 80002f4:	4e0c      	ldr	r6, [pc, #48]	; (8000328 <__libc_init_array+0x38>)
 80002f6:	4c0d      	ldr	r4, [pc, #52]	; (800032c <__libc_init_array+0x3c>)
 80002f8:	1ba4      	subs	r4, r4, r6
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	42a5      	cmp	r5, r4
 80002fe:	d109      	bne.n	8000314 <__libc_init_array+0x24>
 8000300:	f000 f81a 	bl	8000338 <_init>
 8000304:	2500      	movs	r5, #0
 8000306:	4e0a      	ldr	r6, [pc, #40]	; (8000330 <__libc_init_array+0x40>)
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <__libc_init_array+0x44>)
 800030a:	1ba4      	subs	r4, r4, r6
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	42a5      	cmp	r5, r4
 8000310:	d105      	bne.n	800031e <__libc_init_array+0x2e>
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000318:	4798      	blx	r3
 800031a:	3501      	adds	r5, #1
 800031c:	e7ee      	b.n	80002fc <__libc_init_array+0xc>
 800031e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000322:	4798      	blx	r3
 8000324:	3501      	adds	r5, #1
 8000326:	e7f2      	b.n	800030e <__libc_init_array+0x1e>
 8000328:	08000350 	.word	0x08000350
 800032c:	08000350 	.word	0x08000350
 8000330:	08000350 	.word	0x08000350
 8000334:	08000354 	.word	0x08000354

08000338 <_init>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr

08000344 <_fini>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

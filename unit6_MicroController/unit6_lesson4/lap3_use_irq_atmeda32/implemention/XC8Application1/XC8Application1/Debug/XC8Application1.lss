
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000232  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090d  00000000  00000000  000002af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000016a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001b0  000001b0  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.IOPorts_INIT 00000026  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000060  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 00000038  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 00000038  00000104  00000104  00000178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_3 00000038  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  000001b8  000001b8  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  000001ba  000001ba  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  000001bc  000001bc  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000019a  0000019a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_2>
   c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_3>
  10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000001b0 <__bad_interrupt>:
 1b0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.IOPorts_INIT:

00000174 <IOPorts_INIT>:

#define F_CPU 8000000ul

void IOPorts_INIT(void){
	// portD pin5 output--->led
	DDRD |=(1<<5);
 174:	81 b3       	in	r24, 0x11	; 17
 176:	80 62       	ori	r24, 0x20	; 32
 178:	81 bb       	out	0x11, r24	; 17
	// portD pin6 output--->led
	DDRD |=(1<<6);
 17a:	81 b3       	in	r24, 0x11	; 17
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	81 bb       	out	0x11, r24	; 17
	// portD pin7 output--->led
	DDRD |=(1<<7);
 180:	81 b3       	in	r24, 0x11	; 17
 182:	80 68       	ori	r24, 0x80	; 128
 184:	81 bb       	out	0x11, r24	; 17
	// portD pin2 input--->button
	DDRD &=~(1<<2);//--->INT0
 186:	81 b3       	in	r24, 0x11	; 17
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	81 bb       	out	0x11, r24	; 17
	// portD pin3 input--->button
	DDRD &=~(1<<3);//--->INT1
 18c:	81 b3       	in	r24, 0x11	; 17
 18e:	87 7f       	andi	r24, 0xF7	; 247
 190:	81 bb       	out	0x11, r24	; 17
	// portB pin2 input--->button
	DDRB &=~(1<<2);//--->INT2
 192:	87 b3       	in	r24, 0x17	; 23
 194:	8b 7f       	andi	r24, 0xFB	; 251
 196:	87 bb       	out	0x17, r24	; 23
 198:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
}
void main(void){
	IOPorts_INIT();
  6c:	0e 94 ba 00 	call	0x174	; 0x174 <IOPorts_INIT>
	sei();
  70:	78 94       	sei
	//detect any logical change to INT0
	MCUCR |=(1<<0);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	96 b7       	in	r25, 0x36	; 54
  76:	81 60       	ori	r24, 0x01	; 1
  78:	96 bf       	out	0x36, r25	; 54
  7a:	85 bf       	out	0x35, r24	; 53
	//detect any rising edge to INT1
	MCUCR |=(1<<2);
  7c:	85 b7       	in	r24, 0x35	; 53
  7e:	96 b7       	in	r25, 0x36	; 54
  80:	84 60       	ori	r24, 0x04	; 4
  82:	96 bf       	out	0x36, r25	; 54
  84:	85 bf       	out	0x35, r24	; 53
	MCUCR |=(1<<3);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	96 b7       	in	r25, 0x36	; 54
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	96 bf       	out	0x36, r25	; 54
  8e:	85 bf       	out	0x35, r24	; 53
	//detect any falling edge to INT2
	MCUCSR &=~(1<<6);
  90:	84 b7       	in	r24, 0x34	; 52
  92:	95 b7       	in	r25, 0x35	; 53
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	95 bf       	out	0x35, r25	; 53
  98:	84 bf       	out	0x34, r24	; 52
	//enable PA0 to INT0
	GICR |=(1<<6);
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	9c b7       	in	r25, 0x3c	; 60
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	9c bf       	out	0x3c, r25	; 60
  a2:	8b bf       	out	0x3b, r24	; 59
	//enable PA0 to INT1
	GICR |=(1<<7);
  a4:	8b b7       	in	r24, 0x3b	; 59
  a6:	9c b7       	in	r25, 0x3c	; 60
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	9c bf       	out	0x3c, r25	; 60
  ac:	8b bf       	out	0x3b, r24	; 59
	//enable PA0 to INT2
	GICR |=(1<<5);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	9c b7       	in	r25, 0x3c	; 60
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	9c bf       	out	0x3c, r25	; 60
  b6:	8b bf       	out	0x3b, r24	; 59


	while(1){
		PORTD &=~(1<<5);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	82 bb       	out	0x12, r24	; 18
		PORTD &=~(1<<6);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8f 7b       	andi	r24, 0xBF	; 191
  c2:	82 bb       	out	0x12, r24	; 18
		PORTD &=~(1<<7);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	f6 cf       	rjmp	.-20     	; 0xb8 <main+0x4c>

Disassembly of section .text.__vector_1:

000000cc <__vector_1>:
	}
}
ISR(INT0_vect){
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	//turn on led in portD pin5
	PORTD |=(1<<5);
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f e3       	ldi	r18, 0x3F	; 63
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__vector_1+0x1c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__vector_1+0x26>
  f2:	00 00       	nop
	//wait 1s
	_delay_ms(1000);
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

Disassembly of section .text.__vector_2:

00000104 <__vector_2>:
ISR(INT1_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	//turn on led in portD pin6
	PORTD |=(1<<6);
 114:	82 b3       	in	r24, 0x12	; 18
 116:	80 64       	ori	r24, 0x40	; 64
 118:	82 bb       	out	0x12, r24	; 18
 11a:	2f e3       	ldi	r18, 0x3F	; 63
 11c:	8d e0       	ldi	r24, 0x0D	; 13
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <__vector_2+0x1c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <__vector_2+0x26>
 12a:	00 00       	nop
	//wait 1s
	_delay_ms(1000);
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

Disassembly of section .text.__vector_3:

0000013c <__vector_3>:
ISR(INT2_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
	//turn on led in portD pin7
	PORTD |=(1<<7);
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	82 bb       	out	0x12, r24	; 18
 152:	2f e3       	ldi	r18, 0x3F	; 63
 154:	8d e0       	ldi	r24, 0x0D	; 13
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <__vector_3+0x1c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <__vector_3+0x26>
 162:	00 00       	nop
	//wait 1s
	_delay_ms(1000);
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000001b8 <_fini>:
 1b8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ba <__funcs_on_exit>:
 1ba:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001bc <__simulator_exit>:
 1bc:	08 95       	ret

Disassembly of section .text.exit:

0000019a <exit>:
 19a:	ec 01       	movw	r28, r24
 19c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__funcs_on_exit>
 1a0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_fini>
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 de 00 	call	0x1bc	; 0x1bc <__simulator_exit>
 1aa:	ce 01       	movw	r24, r28
 1ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Exit>

Disassembly of section .text._Exit:

000001b4 <_Exit>:
 1b4:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
